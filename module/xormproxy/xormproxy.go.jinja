//orm用于映射mysql
package xormproxy

import (
	"context"
	"fmt"
	"net/url"
	"strings"

	log "github.com/Golang-Tools/loggerhelper"
	_ "github.com/go-sql-driver/mysql"
	_ "github.com/lib/pq"
	_ "github.com/mattn/go-sqlite3" //根据使用的driver填写
	"github.com/xormplus/xorm"
)

//Callback redis操作的回调函数
type Callback func(cli xorm.EngineInterface) error

//XormProxy redis客户端的代理
type XormProxy struct {
	*xorm.Engine
	opts      Options
	callBacks []Callback
}

// New 创建一个新的数据库客户端代理
func New() *XormProxy {
	proxy := new(XormProxy)
	return proxy
}

// IsOk 检查代理是否已经可用
func (proxy *XormProxy) IsOk() bool {
	return proxy.Engine != nil
}

//SetConnect 设置连接的客户端
//@params cli UniversalClient 满足redis.UniversalClient接口的对象的指针
func (proxy *XormProxy) SetConnect(cli *xorm.Engine) error {
	if proxy.IsOk() {
		return ErrProxyAllreadySettedUniversalClient
	}
	proxy.Engine = cli

	if proxy.opts.Parallelcallback {
		for _, cb := range proxy.callBacks {
			go func(cb Callback) {
				err := cb(proxy.Engine)
				if err != nil {
					log.Error("regist callback get error", log.Dict{"err": err})
				} else {
					log.Debug("regist callback done")
				}
			}(cb)
		}
	} else {
		for _, cb := range proxy.callBacks {
			err := cb(proxy.Engine)
			if err != nil {
				log.Error("regist callback get error", log.Dict{"err": err})
			} else {
				log.Debug("regist callback done")
			}
		}
	}
	return nil
}

func (proxy *XormProxy) SetPool(sqldb *xorm.Engine) {
	if proxy.opts.MaxIdleConns > 0 {
		sqldb.SetMaxIdleConns(proxy.opts.MaxIdleConns)
	}
	if proxy.opts.MaxOpenConns > 0 {
		sqldb.SetMaxOpenConns(proxy.opts.MaxOpenConns)
	}
	if proxy.opts.ConnMaxLifetime > 0 {
		sqldb.SetConnMaxLifetime(proxy.opts.ConnMaxLifetime)
	}
	if proxy.opts.ShowSQL {
		sqldb.ShowSQL(true)
	}
	sqldb.SetLogLevel(proxy.opts.LogLevel)
}

//InitFromURL 从URL条件初始化代理对象
func (proxy *XormProxy) Init(opts ...Option) error {
	for _, opt := range opts {
		opt.Apply(&proxy.opts)
	}
	var sqldb *xorm.Engine
	U, err := url.Parse(proxy.opts.URL)
	if err != nil {
		return err
	}
	switch U.Scheme {
	case "postgres":
		{
			sqldb, err = xorm.NewEngine("postgres", proxy.opts.URL)
			if err != nil {
				return err
			}
			proxy.SetPool(sqldb)

		}
	case "mysql":
		{
			userinfo := ""
			username := U.User.Username()
			pwd, ok := U.User.Password()
			if ok && username != "" {
				userinfo = fmt.Sprintf("%s:%s@", username, pwd)
			} else if ok && username == "" {
				userinfo = fmt.Sprintf(":%s@", pwd)
			} else if !ok && username != "" {
				userinfo = fmt.Sprintf("%s@", username)
			}
			dataSourceName := fmt.Sprintf("%stcp(%s)%s?%s", userinfo, U.Host, U.Path, U.RawQuery)
			sqldb, err = xorm.NewEngine("mysql", dataSourceName)
			if err != nil {
				return err
			}
			proxy.SetPool(sqldb)

		}
	case "sqlite":
		{
			dataSourceName := strings.ReplaceAll(proxy.opts.URL, fmt.Sprintf("%s://", U.Scheme), "")
			sqldb, err = xorm.NewEngine("sqlite3", dataSourceName)
			if err != nil {
				return err
			}
			if !strings.Contains(dataSourceName, ":memory:") {
				proxy.SetPool(sqldb)
			} else {
				sqldb.SetMaxIdleConns(1000)
				sqldb.SetConnMaxLifetime(0)
			}
		}
	default:
		{
			return ErrUnSupportSchema
		}
	}
	return proxy.SetConnect(sqldb)
}

// Regist 注册回调函数,在init执行后执行回调函数
//如果对象已经设置了被代理客户端则无法再注册回调函数
func (proxy *XormProxy) Regist(cb Callback) error {
	if proxy.IsOk() {
		return ErrProxyAllreadySettedUniversalClient
	}
	proxy.callBacks = append(proxy.callBacks, cb)
	return nil
}

//DB 默认的xorm代理对象
var DB = New()
